// Code generated by MockGen. DO NOT EDIT.
// Source: istorage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIStorage is a mock of IStorage interface.
type MockIStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageMockRecorder
}

// MockIStorageMockRecorder is the mock recorder for MockIStorage.
type MockIStorageMockRecorder struct {
	mock *MockIStorage
}

// NewMockIStorage creates a new mock instance.
func NewMockIStorage(ctrl *gomock.Controller) *MockIStorage {
	mock := &MockIStorage{ctrl: ctrl}
	mock.recorder = &MockIStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorage) EXPECT() *MockIStorageMockRecorder {
	return m.recorder
}

// DeleteState mocks base method.
func (m *MockIStorage) DeleteState(userId int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteState", userId)
}

// DeleteState indicates an expected call of DeleteState.
func (mr *MockIStorageMockRecorder) DeleteState(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteState", reflect.TypeOf((*MockIStorage)(nil).DeleteState), userId)
}

// Get mocks base method.
func (m *MockIStorage) Get(userID int64) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userID)
	ret0, _ := ret[0].(int)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockIStorageMockRecorder) Get(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIStorage)(nil).Get), userID)
}

// Set mocks base method.
func (m *MockIStorage) Set(userID int64, state int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", userID, state)
}

// Set indicates an expected call of Set.
func (mr *MockIStorageMockRecorder) Set(userID, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIStorage)(nil).Set), userID, state)
}
